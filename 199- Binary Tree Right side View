/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
public IList<int> RightSideView(TreeNode root) {
    IList<int> result = new List<int>();
    if(root == null) return result;

    Queue<TreeNode> queue = new Queue<TreeNode>();
    queue.Enqueue(root);
    while(queue.Count > 0)
    {
        int size = queue.Count;
        for( int i = 0 ; i < size; i++)
        {
            TreeNode node = queue.Dequeue();
            if( i == size - 1 )
            {
                   result.Add(node.val);
            }

            if(node.left != null) queue.Enqueue(node.left);
            if(node.right != null) queue.Enqueue(node.right);
        }
    }
    return result;
    }
}


/*
public IList<int> RightSideView(TreeNode root) {
        IList<int> result = new List<int>();
        if(root == null) return result;
        rightViewHelper(root, result, 0);
        return result;
    }

    public void rightViewHelper( TreeNode curr,  IList<int> result, int currDepth)
    {
        if(curr == null) return;
        if(currDepth == result.Count)
        {
            result.Add(curr.val);
        }

        rightViewHelper(curr.right, result, currDepth + 1);
        rightViewHelper(curr.left, result, currDepth + 1);
    }
*/
